#include "config.h"
#include "stm8s_type.h"
#include "stm8s_exti.h"
#include "uart.h"
//#include "stm8s_spi.h"
#include "main.h"
#include "led.h"
#include "upg.h"
#include "charge.h"
#include "wireless_func.h"
#include "Tas5711.h"
#include "key.h"
#include "BT830.h"

u8 system_20ms_tick=0;
u8 system_2s_tick;
u8 key_count;

u8 rest_wireless_time=0;
u8 Wireless_State_L_time=0;
u8 bt_status=1;

u8 rx_no_standby_time=0;
u8 stereo_enable_time=5;
u16 R_Stereo_no_synic_time=0;
u8 BT_3MIN_reconect=0;
u8  R_stereo_rest_time=0;

u8 Stereo_no_synic_time=0;
u8 LR_Flag=0;  // L =2  R=1
u8 power_off_flag=0;
bool no_bt_audio_flag=0;
u8 new_old_board=0;

u8  re_sent_command1_time=0;
u8  re_sent_command0_time=0;

u8   RX_disconnect_time=0;
u8    ready_to_sent_command0_flg=0;
u8    Pre_Wireless_State=0;
u8    timer_20s=0;
System_State  Sys_state=Sod_state;

u16  wireless_int_pin_ERROR=0;
u8  pairing_flag=0;
u8 bt_power_on_ready_time=0;
u8 bt_poweroff_time=0;
u8 system_1s_Timer_FLAG=0;
u16 bt_disconnect_time=0;

u8     led_test_time=0;


u8   connect_to_disconnecttime=0;
u8   link_to_dislinktime=0;


#define HSEStartUp_TimeOut  0x1000

ErrorStatus  WaitForHSEStartUp(void)
{
	static volatile FlagStatus HSEStatus;
	u16 StartUpCounter =HSEStartUp_TimeOut;
	/* Wait till HSE is ready and if Time out is reached exit */
	do
	{
		HSEStatus = CLK_GetFlagStatus(CLK_FLAG_HSERDY);
		StartUpCounter++;  
	}
	while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
	if(CLK_GetFlagStatus(CLK_FLAG_HSERDY) != RESET)
	return SUCCESS;
	return ERROR;
}
void CLOCK_Init(void)	
	
{
        CLK_DeInit();  //lxk add
	//CLK_HSECmd(DISABLE);
	//CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);

  	
	CLK_HSECmd(ENABLE);
	if(WaitForHSEStartUp()==SUCCESS)//use  HSE as  master CLK
	{
		CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,CLK_SOURCE_HSE ,DISABLE,  CLK_CURRENTCLOCKSTATE_DISABLE);
		while(CLK_GetSYSCLKSource()!=CLK_SOURCE_HSE);
			CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);
	}
	
	 CLK_CCOConfig(CLK_OUTPUT_CPU);
        CLK_CCOCmd(ENABLE);//

}
void Init_ADC(void)
{
	ADC1_Init(ADC1_CONVERSIONMODE_CONTINUOUS,ADC1_CHANNEL_9,
	ADC1_PRESSEL_FCPU_D18,
	ADC1_EXTTRIG_TIM,DISABLE,ADC1_ALIGN_RIGHT,ADC1_SCHMITTTRIG_CHANNEL9,DISABLE);
	ADC1_StartConversion();
}
void  TIM4_Config_1MS(void)    /*for 1ms systick timer*/
 {
         TIM4_DeInit(); // lxk add 	 
	TIM4_TimeBaseInit(TIM4_PRESCALER_8,0xf8 );   //0xBA
	TIM4_ITConfig(TIM4_IT_UPDATE, ENABLE);
	TIM4_Cmd(ENABLE); 
	
}
void Init_Config_IO(void)
{
	/**** LED *********************/	
	GPIO_Init(GPIOC, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, GPIO_MODE_OUT_PP_HIGH_SLOW);  //
	/****Wireless SDA SCL******/
	//GPIO_Init(GPIOE, GPIO_PIN_1|GPIO_PIN_2, GPIO_MODE_OUT_OD_HIZ_FAST);   //
	/****Wireless Request INT****/
	GPIO_Init(GPIOD, GPIO_PIN_7, GPIO_MODE_IN_PU_NO_IT);  //
	/****Connect Status****/
	GPIO_Init(GPIOA, GPIO_PIN_1, GPIO_MODE_IN_FL_NO_IT); //

         /**/
	//GPIO_Init(GPIOA, GPIO_PIN_4, GPIO_MODE_OUT_PP_HIGH_FAST); //ON OFF

	/*PD3 -->STAT1,PC3-->STAT2*/
	GPIO_Init(GPIOA, GPIO_PIN_5, GPIO_MODE_IN_FL_NO_IT);  //
	
	GPIO_Init(GPIOA, GPIO_PIN_6, GPIO_MODE_IN_FL_NO_IT); //
	
	/*****/
	GPIO_Init(GPIOA, GPIO_PIN_2, GPIO_MODE_OUT_PP_LOW_SLOW);

	//GPIO_Init(GPIOB, GPIO_PIN_2, GPIO_MODE_OUT_PP_HIGH_FAST);
       GPIO_Init(GPIOB, GPIO_PIN_2, GPIO_MODE_IN_FL_NO_IT);   //HW_OFF

	GPIO_Init(GPIOA, GPIO_PIN_4, GPIO_MODE_IN_PU_NO_IT); // ON_OFF key detect.

	GPIO_Init(GPIOD, GPIO_PIN_4, GPIO_MODE_OUT_PP_HIGH_FAST);  // TX_RX

	GPIO_Init(GPIOB, GPIO_PIN_3, GPIO_MODE_OUT_PP_HIGH_FAST);    //AMP RST

	GPIO_Init(GPIOB, GPIO_PIN_4, GPIO_MODE_OUT_PP_HIGH_FAST);  //  AMP MUTE

	//GPIO_Init(GPIOB, GPIO_PIN_0, GPIO_MODE_OUT_PP_HIGH_FAST); //ON 12 V

	GPIO_Init(GPIOB, GPIO_PIN_1, GPIO_MODE_OUT_PP_HIGH_FAST); //ON OFF AMP 3.3

	/****BT****/

	GPIO_Init(GPIOG, GPIO_PIN_1, GPIO_MODE_OUT_PP_HIGH_FAST);  // PIO18

	//GPIO_Init(GPIOD, GPIO_PIN_2, GPIO_MODE_OUT_PP_HIGH_FAST);  // bt rest

	GPIO_Init(GPIOD, GPIO_PIN_3, GPIO_MODE_IN_PU_NO_IT);  //bt status
	
	//GPIO_Init(GPIOD, GPIO_PIN_0, GPIO_MODE_IN_PU_NO_IT);   //bt audio en
	 





	/***SOD LED****/
	GPIO_Init(GPIOE, GPIO_PIN_5, GPIO_MODE_OUT_PP_HIGH_FAST);  //sod  LED

	GPIO_Init(GPIOB, GPIO_PIN_5, GPIO_MODE_IN_FL_NO_IT);// ADC

	GPIO_Init(GPIOB, GPIO_PIN_6, GPIO_MODE_IN_PU_NO_IT);  //sod key

	GPIO_Init(GPIOB, GPIO_PIN_7, GPIO_MODE_IN_PU_NO_IT);  //bt key

	GPIO_Init(GPIOD, GPIO_PIN_2, GPIO_MODE_OUT_PP_HIGH_FAST);  //  MCLK_SW
	//GPIO_Init(GPIOC, GPIO_PIN_5, GPIO_MODE_IN_FL_NO_IT);  //bt key

	//GPIO_Init(GPIOD, GPIO_PIN_5, GPIO_MODE_OUT_PP_HIGH_FAST);  /*for uart 2 tx***/
	//GPIO_Init(GPIOD, GPIO_PIN_6, GPIO_MODE_IN_FL_NO_IT);  /*for uart 2 rx***/



//////////////////////////////////////////////////////////////////////////////////////////////////////////

        /******DSP*******/
#ifdef use_ak7755_demo
      
       GPIO_Init(GPIOB, GPIO_PIN_3, GPIO_MODE_IN_FL_NO_IT); //AK7755 PDN (REST)	 
       GPIO_Init(GPIOC, GPIO_PIN_5, GPIO_MODE_IN_FL_NO_IT);//DSP CLK
	GPIO_Init(GPIOC, GPIO_PIN_6, GPIO_MODE_IN_FL_NO_IT);//DSP MOSI
	GPIO_Init(GPIOC, GPIO_PIN_7, GPIO_MODE_IN_FL_NO_IT);//DSP MISO
	GPIO_Init(GPIOG, GPIO_PIN_0, GPIO_MODE_IN_FL_NO_IT);//DSP CSf
#else


       GPIO_Init(GPIOB, GPIO_PIN_3, GPIO_MODE_OUT_PP_HIGH_FAST); //AK7755 PDN (REST) 
       GPIO_Init(GPIOC, GPIO_PIN_5, GPIO_MODE_OUT_OD_HIZ_FAST);//DSP CLK
	GPIO_Init(GPIOC, GPIO_PIN_6, GPIO_MODE_OUT_OD_HIZ_FAST);//DSP MOSI
	GPIO_Init(GPIOC, GPIO_PIN_7, GPIO_MODE_IN_FL_NO_IT);//DSP MISO
	GPIO_Init(GPIOG, GPIO_PIN_0, GPIO_MODE_OUT_PP_HIGH_FAST);//DSP CS

#endif
               /********LED************/
       GPIO_Init(GPIOA, GPIO_PIN_4, GPIO_MODE_OUT_PP_HIGH_FAST); // SOD LED

	GPIO_Init(GPIOA, GPIO_PIN_5, GPIO_MODE_OUT_PP_HIGH_FAST); //SOD LED
            /********SYSTEM CLOCK*******/
	 GPIO_Init(Clock_Coco_Port, Clock_Coco_Pin, GPIO_MODE_OUT_PP_LOW_FAST);//CCO  
        GPIO_Init(GPIOC, GPIO_PIN_3, GPIO_MODE_OUT_PP_HIGH_FAST); //standby
		/****Wireless ******/
        GPIO_Init(GPIOE, GPIO_PIN_2, GPIO_MODE_OUT_PP_HIGH_FAST); //WIRELESS REST
	 GPIO_Init(GPIOE, GPIO_PIN_1|GPIO_PIN_0, GPIO_MODE_OUT_OD_HIZ_FAST);   // WIRELESS I2C
	//GPIO_Init(GPIOE, GPIO_PIN_1|GPIO_PIN_0, GPIO_MODE_IN_FL_NO_IT);   // WIRELESS I2C
     	
	GPIO_Init(GPIOE, GPIO_PIN_3, GPIO_MODE_IN_PU_NO_IT);  //Wireless Request INT/

	 
	    /*********AMP***********/
       GPIO_Init(GPIOB, GPIO_PIN_0, GPIO_MODE_OUT_PP_HIGH_FAST); //AMP SDZ
       GPIO_Init(GPIOE, GPIO_PIN_7, GPIO_MODE_OUT_PP_HIGH_FAST); //AMP MUTE


	   /*******ADC************/
	   GPIO_Init(GPIOE, GPIO_PIN_6, GPIO_MODE_IN_FL_NO_IT);// ADC
}









void System_Init(void)
{
	Battery_Status_Detect();
	if(Link_State==Link_None)
	{
		u8 i;
		battery_quantity=Electric_Full;
		for(i=0;i<30;i++)
		{
			Get_Battery_Status();
			Wait_For_mSec(20);
		}
	}
	system_20ms_tick=0;
}





 void MCU_init(void)
 { 
     
	CLOCK_Init();

	Init_Config_IO();
    //GPIO_WriteLow(GPIOE, GPIO_PIN_0);
	Bt_Init();
        ////////////////////////////////////////////////////////////
         GPIO_WriteHigh(GPIOE, GPIO_PIN_2);     //WIRELESS REST
    	  GPIO_WriteHigh(GPIOC, GPIO_PIN_3);    //standby on
    	  GPIO_WriteHigh(GPIOE, GPIO_PIN_7);  //AMP MUTE
    	  GPIO_WriteHigh(GPIOB, GPIO_PIN_0); 

   #ifndef use_ak7755_demo
          SPI_DSP_Init();
   #endif


		/////////////////////////////////////////////////////
	//Power_onoff_board(1);
       //GPIO_WriteLow(GPIOE, GPIO_PIN_0); //wireless  REST LOW  HOLD
	//Switch_Wireless_Rx(); 
        


	  GPIO_WriteHigh(GPIOA, GPIO_PIN_4);  
	  GPIO_WriteHigh(GPIOB, GPIO_PIN_1);   //ON OFF AMP 3.3


         GPIO_WriteLow(GPIOA, GPIO_PIN_4);  // test led 
	  GPIO_WriteLow(GPIOA, GPIO_PIN_5);  

       Wait_For_mSec(30);
	//Tas5711_12V(LOW);

	UART2_DeInit();

        initUart(UART2_MODE_RX_ENABLE);
       // initUart(UART2_MODE_TXRX_ENABLE); S_DEBUG

	Init_ADC();

	TIM4_Config_1MS();   //  1Millisecond

	enableInterrupts(); 

	Battery_Charge(ENABLE);

	#ifndef use_ak7755_demo
       vAPP_Akm7719_Dsp_Init();
      #endif
	System_Init();  

       


}



  void System_Main_Loop(void)
{
	if(system_20ms_tick>40)
	       {
	       
		system_20ms_tick=0x00;
		Wireless_RxInfoProcess();
		Wireless_State_Process();
               // Key_Service();
		if((wireless_int_pin_ERROR>=1200)&&(Sys_state==Sod_state))
		{
		//  Wireless_Reset();
		  disp_timer=4;
		  wireless_int_pin_ERROR=0;
		}	
		
        	}   
 
       //Charge_Manager_Loop();
	Led_Display_Loop();
	//system_1s_Timer();
}






void system_1Ms_Timer(void)
{

	key_count++;
	if(key_count>=20)
	{
		key_count=0;
		Key_Scan();

	}
     if(!WIRELESS_INT_PIN_STATUS)	
     	{
     	if(Sys_state==Sod_state)
        wireless_int_pin_ERROR++;
	
     	}
	 else
	{
        wireless_int_pin_ERROR=0;
	}
}

void system_1s_Timer(void)
{

//if(!system_1s_Timer_FLAG)
	return;

   if(STB_FLAG)
   	{ 
   	    System_PowerOff();
	    Power_onoff_board(OFF);	
   	}
	if(re_sent_command1_time)
		{
		re_sent_command1_time--;
		info_Tx_Wireless_Sod_BT_mode(1);

		}

	
          	if(re_sent_command0_time)
		{
		re_sent_command0_time--;
		
		if((re_sent_command0_time%3==0)&&(Sys_state==Sod_state))
		{
		 info_Tx_Wireless_Sod_BT_mode(0);
		}
		}
  


	

	if(bt_reconnect_time)
	{
	  bt_reconnect_time--;
	  if(!bt_reconnect_time)
	  	{ 
	  	BT_PIO18(LOW);
		bt_reconnect_do_time=10;
	  	}     
	}

       	if(Sys_state!=Sod_state)
	{
             if(bt_status==BT_STATUS_DISCONNECTED)
             	{

             if(bt_3min_reconnect_flag)

         	{
  		if(BT_3MIN_reconect)		
		    BT_3MIN_reconect--;  
			 
	          if((!bt_reconnect_time)&&(BT_3MIN_reconect>0))
	               bt_reconnect_time=20;
         	} 
		 
             	}
	}


	if(rx_no_standby_time)
	{
	  rx_no_standby_time--;
	   if(!rx_no_standby_time)
	   	{ 	    
       
		   info_Wireless_Rx_BT_state(1);

	        }
	}




      if(pairing_flag)
		 pairing_flag--;

     if(bt_power_on_ready_time)
             bt_power_on_ready_time--;
	 
		 


	   if((Sys_state==Stereo_state)&&(Wireless_State==_Wireless_ConnectTx))  
	   	{
	   	  Stereo_no_synic_time=0;
	   	}

	         
         if(not_change_bt_mono_flag)
		 not_change_bt_mono_flag--;
		 
          if(Wireless_State==_Wireless_ConnectTx)
               Pre_Wireless_State=Wireless_State;

           if((Sys_state==Sod_state)&& (Wireless_State==_Wireless_None_Connect)&&(Pre_Wireless_State==_Wireless_ConnectTx))
           	{

                  RX_disconnect_time++;
                  
		  if(RX_disconnect_time>15)	
		  	{
		  	 RX_disconnect_time=0;
			 ready_to_sent_command0_flg=1;	
			 Pre_Wireless_State=Wireless_State;
		  	}
		
		}
	   else
	   	{ 
	   	RX_disconnect_time=0;

		}


           if((Sys_state==Sod_state)&& (Wireless_State==_Wireless_ConnectTx)&&(ready_to_sent_command0_flg))
		   	
           	{
                  re_sent_command0_time=7;

		  }
		   

    if ( led_test_time)
    	{
           led_test_time--;
           vLed_Display_Upg(led_test_time);	   
	}

		
           timer_20s++;
           if(timer_20s>=20)
           	{
                 timer_20s=0;
		 if(WIRELESS_INT_PIN_STATUS)		 
		  clear_rx_buffuer();	
           	}
         
			
            system_1s_Timer_FLAG=0;
			
}





 void main(void)
{
	MCU_init();     
	while (1)
	{   
	//	Upgrade_Loop();
	//if(up_state==UP_STATE_IDLE) 
	System_Main_Loop();
	}	
}


 
