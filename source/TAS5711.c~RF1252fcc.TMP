#include "config.h"
#include "main.h"
#include "i2c.h"
#include "Tas5711.h"
#include "charge.h"
#include "uart.h"
#include "stm8s_spi.h"


#define REG_SIZE 27
unsigned char const akm_init_config_data[REG_SIZE][2]=
{

0xC0,0x3D,

0xC1,0x00,
0xC2,0x10,
0xC3,0x02,
0xC4,0x40,
0xC5,0x00,

0xC6,0x00,
0xC7,0x00,
0xC8,0x00,
0xC9,0x00,
0xCA,0xE1,

0xCC,0x03,
0xCD,0x00,
0xCE,0xFF,
0xCF,0x30,
0xD0,0x20,

0xD2,0x00,
0xD3,0xf0,
0xD4,0xFF,
0xD5,0x30,
0xD6,0x30,
0xD7,0x30,

//0xD8,0x18,
0xD8,0x00,
0xD9,0x00,
0xDA,0x00,
0xDB,0x00,
//0xC1,0x01//27         
0xCf,0x31//27   
};


#ifndef _AK77XX_DSP_PRAM_INCLUDED
#define _AK77XX_DSP_PRAM_INCLUDED

#define _AK77XX_DSP_PRAM_BUF_SIZE	333
static unsigned char const ak77dspPRAM[_AK77XX_DSP_PRAM_BUF_SIZE] = {
	0xB8, 0x00, 0x00,		// command code and address
	0x0C, 0x94, 0xED, 0x1E, 0x74,
	0x04, 0xA9, 0x1C, 0x6D, 0x55,
	0x00, 0x44, 0x02, 0x11, 0x99,
	0x09, 0x58, 0x6F, 0x4D, 0xD0,
	0x01, 0x5A, 0x7C, 0xC9, 0x27,
	0x09, 0x35, 0x31, 0x01, 0x86,
	0x03, 0x4B, 0xFA, 0x2C, 0x60,
	0x0A, 0x78, 0xFB, 0x60, 0xC8,
	0x04, 0x82, 0x17, 0xD7, 0xC0,
	0x0C, 0xFB, 0x32, 0x83, 0x6C,
	0x07, 0xAE, 0xA1, 0xCA, 0xF2,
	0x0E, 0xD9, 0xA1, 0xD7, 0x95,
	0x0A, 0x7B, 0xE5, 0x66, 0x49,
	0x08, 0x59, 0x5C, 0xF9, 0xB1,
	0x0E, 0x38, 0xDA, 0xF8, 0x86,
	0x00, 0x84, 0x83, 0x85, 0x8A,
	0x04, 0xDE, 0x90, 0x15, 0xC2,
	0x00, 0xFD, 0x96, 0x5F, 0x72,
	0x08, 0x36, 0x8B, 0x1F, 0x86,
	0x04, 0xA4, 0x9C, 0xED, 0xEC,
	0x01, 0x76, 0xE5, 0xA9, 0x8A,
	0x05, 0x16, 0x0A, 0x85, 0xF9,
	0x02, 0xEE, 0x07, 0xBC, 0x45,
	0x0D, 0x44, 0x82, 0x76, 0x37,
	0x03, 0x43, 0xBB, 0x3B, 0xBF,
	0x07, 0xC5, 0xCD, 0x04, 0x19,
	0x04, 0x79, 0xF3, 0x64, 0x94,
	0x01, 0xB5, 0x71, 0x37, 0xA2,
	0x04, 0x46, 0x13, 0x55, 0x69,
	0x01, 0x37, 0x23, 0xC5, 0x61,
	0x03, 0x24, 0x37, 0xE6, 0x54,
	0x0C, 0x06, 0x32, 0x8D, 0x2F,
	0x08, 0xB1, 0xD6, 0x5D, 0xC3,
	0x02, 0x83, 0x5A, 0x76, 0x03,
	0x03, 0x55, 0x03, 0xD5, 0xED,
	0x0C, 0x0E, 0x74, 0x8C, 0x38,
	0x09, 0x0C, 0xE1, 0x6B, 0x66,
	0x07, 0x78, 0x7F, 0xC1, 0xEF,
	0x0B, 0x99, 0x04, 0xA7, 0x68,
	0x03, 0xE6, 0xC5, 0x48, 0xE3,
	0x02, 0xE2, 0xE2, 0xA0, 0x9A,
	0x0C, 0x27, 0x2A, 0xC3, 0x7A,
	0x0E, 0x45, 0x0A, 0xD7, 0xC7,
	0x09, 0x6F, 0xC9, 0xAF, 0xA8,
	0x0C, 0x65, 0x1A, 0x5B, 0xF0,
	0x0F, 0xAC, 0xB3, 0x07, 0xD5,
	0x0A, 0xB6, 0xED, 0x96, 0xB6,
	0x02, 0x05, 0xAB, 0xC9, 0x38,
	0x0C, 0xE9, 0x3D, 0x75, 0x12,
	0x09, 0xC2, 0xF6, 0xC9, 0x2c,
	0x0C, 0xFF, 0x82, 0x9F, 0x1F,
	0x0E, 0x09, 0x4F, 0x51, 0xEF,
	0x05, 0x8A, 0x11, 0xC4, 0x55,
	0x04, 0xC4, 0x40, 0x21, 0x18,
	0x0E, 0x55, 0x86, 0xF0, 0xFB,
	0x06, 0x15, 0xA7, 0x2C, 0x9A,
	0x03, 0x93, 0x52, 0xB0, 0x10,
	0x02, 0x34, 0x3F, 0xA0, 0x47,
	0x09, 0x67, 0x8F, 0xBA, 0x0D,
	0x0D, 0xD8, 0x2D, 0x79, 0x76,
	0x06, 0x57, 0x96, 0x30, 0x31,
	0x0E, 0x7A, 0xEB, 0xA4, 0x3B,
	0x0D, 0xED, 0x1A, 0x1F, 0x61,
	0x0F, 0x07, 0xBE, 0x2E, 0x64,
	0x02, 0x9D, 0xA3, 0xCB, 0xB8,
	0x0A, 0x23, 0x8D, 0xAB, 0x89
};

#endif		// end of _AK77XX_DSP_PRAM_INCLUDED








///////////////////////////////////////////////////////////////////

void SPI_DSP_Init(void)
{
 	SPI_DeInit();
	SPI_Init(SPI_FIRSTBIT_MSB, SPI_BAUDRATEPRESCALER_256, SPI_MODE_MASTER, SPI_CLOCKPOLARITY_LOW, SPI_CLOCKPHASE_1EDGE, SPI_DATADIRECTION_2LINES_FULLDUPLEX, SPI_NSS_SOFT,(u8)0x07);
	SPI_Cmd(ENABLE);
}


u8 SPI_DSP_SendByte(u8 byte)
{
  /* Loop while DR register in not emplty */
  while(SPI_GetFlagStatus(SPI_FLAG_TXE) == RESET);

  /* Send byte through the SPI1 peripheral */
  SPI_SendData( byte);

  /* Wait to receive a byte */
  while(SPI_GetFlagStatus( SPI_FLAG_RXNE) == RESET);

  /* Return the byte read from the SPI bus */
  return SPI_ReceiveData();
}


u8 SPI_DSP_ReadByte(void)
{
  return (SPI_DSP_SendByte(Dummy_Byte));
}



void Dsp_Send_N_FF(u16 num)
{


  u16 i;

 for(i=0;i<num;i++)
  {
       SPI_DSP_SendByte(0xff);
  }
  
}



u8 Dsp_Write_buf(u8 *buf,u16 len)
{


  u8 i;
  u16 times;


while(len)
  {
    for(i=0;i<4;i++)
    {
       SPI_DSP_SendByte(*buf);
       buf++; 
    }
    len--;

  }

  return OK;
  
}





u8 uHAL_Akm7719_SPI_Write(u8 addr, u8 data)
{
 SPI_DSP_CS(0);
SPI_DSP_SendByte(addr);
SPI_DSP_SendByte(data);
 SPI_DSP_CS(1);
}

void vHAL_Akm7719_control_reg_init(void)
{
  u8 ii;
  for(ii=0;ii<REG_SIZE;ii++)
  	{
  	   uHAL_Akm7719_SPI_Write(akm_init_config_data[ii][0],akm_init_config_data[ii][1]);
	   Wait_For_mSec(5);
  	}
}




u8 Dsp_WriteData(u8 *buf,u16 len)
{


  u16 i;
  u16 times;

  SPI_DSP_CS(0);

    for(i=0;i<len;i++)
    {
       SPI_DSP_SendByte(*buf);
       buf++; 
    }
  SPI_DSP_CS(1);

  }





u8 uAPP_Akm7719_PramDatasWrite_InDspResetMode(void)
{   
   //  u8 rc;

  //   @far unsigned char  *fpdata;
  //   fpdata =ak77dspPRAM;
	 
    //    rc= uAPP_Akm7719_I2C_Writes(fpdata[0],(sizeof(ak77dspPRAM)-1),fpdata+1);//0xb4
   	//return rc;
}

void  vAPP_Akm7719_Dsp_Init(void)
{

 DSP_RESET(0);
 Wait_For_mSec(10);
DSP_RESET(1);
 Wait_For_mSec(100);



  SPI_DSP_CS(0);
SPI_DSP_SendByte(0xc1);
SPI_DSP_SendByte(0x00);
 SPI_DSP_CS(1);

  //DSP_RESET(0);
  
Wait_For_mSec(20);
SPI_DSP_CS(0);
SPI_DSP_SendByte(0xcf);
SPI_DSP_SendByte(0x34);
SPI_DSP_CS(1);
Wait_For_mSec(20);

   SPI_DSP_CS(0);
SPI_DSP_SendByte(0xcf);
SPI_DSP_SendByte(0x30);
 SPI_DSP_CS(1);
  //DSP_RESET(0);
  

 vHAL_Akm7719_control_reg_init();





Wait_For_mSec(100);

  Dsp_WriteData((u8*)ak77dspPRAM,_AK77XX_DSP_PRAM_BUF_SIZE);
  Wait_For_mSec(20);
 
  Dsp_WriteData((u8*)ak77dspCRAM,_AK77XX_DSP_CRAM_BUF_SIZE);
  Wait_For_mSec(20);
  
   Dsp_WriteData((u8*)ak77dspORAM,_AK77XX_DSP_ORAM_BUF_SIZE);
   Wait_For_mSec(20);

Wait_For_mSec(2000);
Wait_For_mSec(2000);


 SPI_DSP_CS(0);
SPI_DSP_SendByte(0xcf);
SPI_DSP_SendByte(0x30);
 SPI_DSP_CS(1);
 Wait_For_mSec(20);
  //DSP_RESET(0);
  
Wait_For_mSec(20);
SPI_DSP_CS(0);
SPI_DSP_SendByte(0xc1);
SPI_DSP_SendByte(0x01);
SPI_DSP_CS(1);
Wait_For_mSec(20);

   SPI_DSP_CS(0);
SPI_DSP_SendByte(0xcf);
SPI_DSP_SendByte(0x38);
 SPI_DSP_CS(1);
  //DSP_RESET(0);
  
Wait_For_mSec(20);
SPI_DSP_CS(0);
SPI_DSP_SendByte(0xcf);
SPI_DSP_SendByte(0x3c);
SPI_DSP_CS(1);

}
///////////////////////////////////////////////////////////////////////////////////////////////////
