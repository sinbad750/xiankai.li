#ifndef _TAS5711_H
#define _TAS5711_H






// autogenerate CRAM file
#ifndef _AK77XX_DSP_CRAM_INCLUDED
#define _AK77XX_DSP_CRAM_INCLUDED

#define _AK77XX_DSP_CRAM_BUF_SIZE	45
static unsigned char const ak77dspCRAM[_AK77XX_DSP_CRAM_BUF_SIZE] = {
#if 1  //NO NOISE GATE

	0xB4, 0x00, 0x00,		// command code and address
	0x20, 0x00, 0x00,
	0x7F, 0xFC, 0x00,
	0x4B, 0x24, 0x00,
	0x7F, 0xFF, 0x00,
	0x54, 0x4F, 0x00,
	0x00, 0x00, 0x00,
	0x78, 0x00, 0x00,
	0x7F, 0xD2, 0x00,
	0x46, 0xA8, 0x00,
	0x00, 0x00, 0x00,
	0x7D, 0x63, 0x00,
	0x21, 0xF6, 0x00,
	0x7F, 0xBB, 0x00,
	0x70, 0x09, 0x00

    /*
	0xB4, 0x00, 0x00,		// 96DB
	0x20, 0x00, 0x00,
	0x7F, 0xFC, 0x00,
	0x4B, 0x24, 0x00,
	0x7F, 0xFF, 0x00,
	0x54, 0x4F, 0x00,
	0x00, 0x00, 0x00,
	0x78, 0x00, 0x00,
	0x7F, 0xD2, 0x00,
	0x46, 0xA8, 0x00,
	0x2F, 0x01, 0xC0,
	0x7D, 0x63, 0x00,
	0x21, 0xF6, 0x00,
	0x7F, 0xBB, 0x00,
	0x70, 0x09, 0x00
     */

	//-100   attack10 release 100
	/*
	0xB4, 0x00, 0x00,		// command code and address
	0x20, 0x00, 0x00,
	0x7F, 0xFC, 0x00,
	0x4B, 0x24, 0x00,
	0x7F, 0xFF, 0x00,
	0x54, 0x4F, 0x00,
	0x00, 0x00, 0x00,
	0x78, 0x00, 0x00,
	0x7F, 0xD2, 0x00,
	0x46, 0xA8, 0x00,
	0x1D, 0xA8, 0xC0,
	0x7D, 0x63, 0x00,
	0x21, 0xF6, 0x00,
	0x7F, 0xFC, 0x00,
	0x4B, 0x24, 0x00 */
  #else


	0xB4, 0x00, 0x00,		// command code and address
	0x20, 0x00, 0x00,
	0x7F, 0xFC, 0x00,
	0x4B, 0x24, 0x00,
	0x7F, 0xFF, 0x00,
	0x54, 0x4F, 0x00,
	0x00, 0x00, 0x00,
	0x68, 0x00, 0x00,
	0x7F, 0xD2, 0x00,
	0x46, 0xA8, 0x00,
	0x4A, 0x25, 0xF0,
	0x7D, 0x63, 0x00,
	0x21, 0xF6, 0x00,
	0x7F, 0xBB, 0x00,
	0x70, 0x09, 0x00
	#endif
};

#endif		// end of _AK77XX_DSP_CRAM_INCLUDED




// autogenerate ORAM file
#ifndef _AK77XX_DSP_ORAM_INCLUDED
#define _AK77XX_DSP_ORAM_INCLUDED

#define _AK77XX_DSP_ORAM_BUF_SIZE	3
static unsigned char const ak77dspORAM[_AK77XX_DSP_ORAM_BUF_SIZE] = {
	0xB2, 0x00, 0x00,		// command code and address
	
	 //0x00, 0x00, 0x28
};

#endif		// end of _AK77XX_DSP_ORAM_INCLUDED

#define Dummy_Byte 0xA5

#define MUTE_ON		1
#define MUTE_OFF	0



// Write command of the AK7719
#define CMD_CRAM_RDY	0x80
#define CMD_OFREG_RDY	0x90

#define	CMD_OFREG_RUN	0xA2
#define	CMD_CRAM_RUN	0xA4

#define	CMD_OFREG_DL	0xB2
#define CMD_CRAM_DL		0xB4
#define	CMD_PRAM_DL		0xB8

#define	CMD_WREG_0h		0xC0
#define	CMD_WREG_1h		0xC1
#define	CMD_WREG_2h		0xC2
#define CMD_WREG_3h		0xC3
#define	CMD_WREG_4h		0xC4
#define	CMD_WREG_5h		0xC5
#define CMD_WREG_6h		0xC6
#define CMD_WREG_8h		0xC8
#define	CMD_WREG_PM0	0xD0
#define CMD_WREG_PM1	0xD1
#define	CMD_WCRC		0xF2
#define	CMD_JX			0xF4



#ifndef _AK77XX_DSP_ADDR_INCLUDED
#define _AK77XX_DSP_ADDR_INCLUDED

// Component: SFADER_1 (fader_mul2_1)
#define 	CRAM_ADDR_LEVEL_SFADER_1 	0x0000
#define 	CRAM_ADDR_ATT_TIME_SFADER_1 	0x0001
#define 	CRAM_ADDR_REL_TIME_SFADER_1 	0x0003

// Component: NoiseGate2_1 (noisegate2_1)
#define 	CRAM_ADDR_THRESHOLD_NoiseGate2_1 	0x0009
#define 	CRAM_ADDR_ATT_TIME_NoiseGate2_1 	0x000A
#define 	CRAM_ADDR_REL_TIME_NoiseGate2_1 	0x000C

#endif //#end of _AK77XX_DSP_ADDR_INCLUDED

void  vAPP_Akm7719_Dsp_Init(void);

void vHAL_Akm7719_control_reg_init(void);
u8  uHAL_Akm7719_SPI_Write(u8 addr, u8 data);
////////////////////////////////////////////////


void SPI_DSP_Init(void);

u8 SPI_DSP_SendByte(u8 byte);

u8 uHAL_Akm7719_SPI_Write_VOL(u8 addr, unsigned long cmd_data);

#endif


